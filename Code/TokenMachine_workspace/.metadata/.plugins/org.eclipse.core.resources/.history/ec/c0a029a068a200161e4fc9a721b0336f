/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2016 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "FreeRTOSConfig_template.h"
#include "stm32f1xx_hal.h"
#include "cmsis_os.h"
#include "usb_device.h"
#include "TWI_LCD.h"


/* USER CODE BEGIN Includes */
#include <assert.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>


/* USER CODE END Includes */
#define TRUE 1
#define FALSE 0
/* Private variables ---------------------------------------------------------*/

#define ILLEGAL_CARD (1 << 0)
#define OUT_OF_MONEY (1 << 1)
#define CHARGING (1 << 2)
#define TOKEN_RELEASE (1 << 3)

ADC_HandleTypeDef hadc1;

CRC_HandleTypeDef hcrc;

I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart3_rx;

osThreadId red_led_task_handle;
osThreadId servo_task_handle;
osThreadId number_check_handle;
osThreadId display_handle;

osMessageQId led_queue_handle;
osMessageQId lcd_queue_handle;
osSemaphoreId RFID_received_handle;
osSemaphoreId authorized_card_handle;

EventGroupHandle_t card_event_group;

TimerHandle_t display_timer;

uint8_t button_pressed;
uint8_t serial_key_number[4];
uint8_t isr_pos;

typedef struct {
	uint8_t serial_number[4];
	uint8_t money;
} data_base;

typedef struct {
	uint8_t blinks;
	uint16_t time;
} red_led_control;
/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_CRC_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
void red_led_task(void const * argument);
void servo_task(void const * argument);
void check_number_task(void const * argument);
void display_task(void const * argument);

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */
  button_pressed = 0;

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_CRC_Init();
  MX_I2C1_Init();
  MX_TIM3_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();

  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  osSemaphoreDef(RFID_received_handle);
  RFID_received_handle = osSemaphoreCreate(osSemaphore(RFID_received_handle), 1);

  osSemaphoreDef(authorized_card_handle);
  authorized_card_handle = osSemaphoreCreate(osSemaphore(authorized_card_handle), 1);


  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  display_timer = xTimerCreate("Timer", 4000, pdFALSE, ( void * ) 0, LCD_Turn_off);


  /**

  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(led_task, red_led_task, osPriorityNormal, 0, 128);
  red_led_task_handle = osThreadCreate(osThread(led_task), NULL);

  /* definition and creation of servo_task */
  osThreadDef(servo, servo_task, osPriorityHigh, 0, 128);
  servo_task_handle = osThreadCreate(osThread(servo), NULL);

  /* definition and creation of number_task */
  osThreadDef(number_task, check_number_task, osPriorityNormal, 0, 128);
  number_check_handle = osThreadCreate(osThread(number_task), NULL);

  /* definition and creation of display_task */
  osThreadDef(display, display_task, osPriorityNormal, 0, 128);
  display_handle = osThreadCreate(osThread(display), NULL);


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of led_queue */
  osMessageQDef(Queue01, 2, red_led_control);
  led_queue_handle = osMessageCreate(osMessageQ(Queue01), NULL);

  osMessageQDef(Queue02, 2, data_base);
  lcd_queue_handle = osMessageCreate(osMessageQ(Queue02), NULL);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  card_event_group = xEventGroupCreate();

  /* Start scheduler */
  osKernelStart();
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}

/* ADC1 init function */
static void MX_ADC1_Init(void)
{

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

}

/* CRC init function */
static void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }

}

/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

}

/* TIM3 init function */
static void MX_TIM3_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 128;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 11200;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.RepetitionCounter = 0;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 4000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim3);

}

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }

  /* Enable interrupt for UART2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(USART2_IRQn);

}

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  __HAL_RCC_TIM3_CLK_ENABLE();

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA4 PA5 PA7 PA8 
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB2 PB15 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /* Enable interrupt for button on PB0 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* Start red_led_task function */
void red_led_task(void const * argument)
{
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
	/* USER CODE BEGIN red_led_task */
	red_led_control led = {0, 0};

	/* Infinite loop */
	for(;;)
	{
		/* Check if there is something in the queue */
		if(uxQueueMessagesWaiting(led_queue_handle))
		{
			/* Start by turning the red led OFF */
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
			/* Get number of blinks and blink time from queue */
			xQueueReceive(led_queue_handle, &led, 0);
			/* One blink needs two times to toggle */
			led.blinks *= 2;
			/* Blink the red led */
			for(uint8_t i = 0; i < led.blinks; i++)
			{
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
				osDelay(led.time);
			}
		}
		osDelay(30);
	}
	/* USER CODE END red_led_task */
}

/* Start servo_task function */
void servo_task(void const * argument)
{
	/* USER CODE BEGIN servo_task */
	TIM_OC_InitTypeDef p;

	p.OCMode = TIM_OCMODE_PWM1;
	p.Pulse = 1120;
	p.OCPolarity = TIM_OCPOLARITY_HIGH;
	p.OCFastMode = TIM_OCFAST_ENABLE;

	/* Infinite loop */
	for(;;)
	{
		/* Wait for check_number_task to release the semaphore */
		if(!osSemaphoreWait(authorized_card_handle, osWaitForever))
		{
			/* Move foot in */
			p.Pulse = 920;
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &p, TIM_CHANNEL_1) != HAL_OK)
			{
				Error_Handler();
			}
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
			osDelay(350);

			/* Move foot out */
			p.Pulse = 1120;
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &p, TIM_CHANNEL_1) != HAL_OK)
			{
				Error_Handler();
			}
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
			osDelay(500);
		}
		osDelay(100);
	}
	/* USER CODE END servo_task */
}

/* Start check_number_task function */
void check_number_task(void const * argument)
{
	/* USER CODE BEGIN check_number_task */

	/* Serial number for tags
	   White RFID card	74:55:9F:C6
	   Red TAG 			BD:1D:B4:43 */

	/* Authorized cards */
	data_base user1 = {{0x74, 0x55, 0x9F, 0xC6}, 3};
	data_base temp_user;

	red_led_control red = {0, 0};
	uint8_t command, release_foot, i;

	/* Command to TAG reader to read serial key of the TAG */
	command = 2;
	HAL_UART_Transmit(&huart2, &command, 0x01, 0xfff);

	isr_pos = 0;

	for(;;)
	{
		/* Wait for TAG reader to release the semaphore */
		if (!osSemaphoreWait(RFID_received_handle, osWaitForever))
		{
			release_foot = TRUE;

	    	// Check if it is an authorized card
	    	i = 4;
	        while (i--)
	        {
				/* Check the number.. */
	            if (serial_key_number[i] != user1.serial_number[i])
	            {
	            	temp_user.serial_number[i] = serial_key_number[i];
	            	release_foot = FALSE;
	            }
	        }
	        // Stores the money
	        temp_user.money = user1.money;

	        if(release_foot)
	        {
		 		/* Charge money */
				if(button_pressed)
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
					user1.money += 3;
					button_pressed = 0;
					xEventGroupSetBits(card_event_group, CHARGING);
					//xQueueSend(lcd_queue_handle, &user1, 0);
				}
				/* Give token */
				else if(user1.money > 0)
				{
					user1.money--;
					osSemaphoreRelease(authorized_card_handle);
					red.blinks = 0;
					red.time = 100;
					xQueueSend(led_queue_handle, &red, 0);
					xEventGroupSetBits(card_event_group, TOKEN_RELEASE);
					xQueueSend(lcd_queue_handle, &user1, 0);
				}
				/* No money */
				else
		 		{
		 			red.blinks = 1;
		 			red.time = 1000;
		 			xQueueSend(led_queue_handle, &user1, 0);
		 			xEventGroupSetBits(card_event_group, OUT_OF_MONEY);
		 		}
	        }
	 		/* Wrong card number */
	        else
	 		{
	        	HAL_UART_Transmit(&huart3, &serial_key_number[0], 0x04, 50);
	        	red.blinks = 4;
	 			red.time = 250;
	 			xQueueSend(led_queue_handle, &red, 0);
	 			xQueueSend(lcd_queue_handle, &temp_user, 0);
	 			xEventGroupSetBits(card_event_group, ILLEGAL_CARD);
	 		}
		}
		osDelay(250);
	}
	/* USER CODE END check_number_task */
}


void display_task(void const * argument){

	// Wait for screen to get power
	osDelay(2000);
	LCD_Init();
	uint16_t event_bits = 0;
	data_base temp_struct;

	xEventGroupClearBits(card_event_group, ILLEGAL_CARD | OUT_OF_MONEY | CHARGING | TOKEN_RELEASE);
	xTimerStart( display_timer, 250);

	osDelay(1000);

	for(;;){
		// Do something smart

		do {
			osDelay(30);
			event_bits = xEventGroupGetBits(card_event_group);
		} while (!event_bits);

		xTimerStop( display_timer, 10 );

		if (event_bits & ILLEGAL_CARD )
		{
			if(xQueueReceive(lcd_queue_handle, &temp_struct, 1000))
			{
				uint8_t card_message[16] = "Nr              ";

				card_message[3] = ((temp_struct.serial_number[0] & 0xF0) >> 4);
				card_message[4] = (temp_struct.serial_number[0] & 0x0F);

				card_message[6] = ((temp_struct.serial_number[1] & 0xF0) >> 4);
				card_message[7] = (temp_struct.serial_number[1] & 0x0F);

				card_message[9] = ((temp_struct.serial_number[2] & 0xF0) >> 4);
				card_message[10] = (temp_struct.serial_number[2] & 0x0F);

				card_message[12] = ((temp_struct.serial_number[3] & 0xF0) >> 4);
				card_message[13] = (temp_struct.serial_number[3] & 0x0F);

				for(int i= 3; i < 14; i++){
						if(card_message[i] > 9){
							card_message[i] += '7';
						} else {
							card_message[i] += '0';
						}
				}

				card_message[5] = ':';
				card_message[8] = ':';
				card_message[11] = ':';

				LCD_String("ILLEGAL CARD    ", 16, card_message, 16);
			}
			else
			{
				LCD_String("ILLEGAL CARD    ", 16, "!               ", 16);
			}
		}
		else if (event_bits & OUT_OF_MONEY)
		{
			if(xQueueReceive(lcd_queue_handle, &temp_struct, 1000))
			{
				uint8_t card_message[16] = "Nr              ";

				card_message[3] = ((temp_struct.serial_number[0] & 0xF0) >> 4);
				card_message[4] = (temp_struct.serial_number[0] & 0x0F);

				card_message[6] = ((temp_struct.serial_number[1] & 0xF0) >> 4);
				card_message[7] = (temp_struct.serial_number[1] & 0x0F);

				card_message[9] = ((temp_struct.serial_number[2] & 0xF0) >> 4);
				card_message[10] = (temp_struct.serial_number[2] & 0x0F);

				card_message[12] = ((temp_struct.serial_number[3] & 0xF0) >> 4);
				card_message[13] = (temp_struct.serial_number[3] & 0x0F);

				for(int i= 3; i < 14; i++){
						if(card_message[i] > 9){
							card_message[i] += '7';
						} else {
							card_message[i] += '0';
						}
				}

				card_message[5] = ':';
				card_message[8] = ':';
				card_message[11] = ':';

				LCD_String("No money on card", 16, card_message, 16);
			}
			else
			{
				LCD_String("Out of money!   ", 16, "!               ", 16);
			}
		}
		else if (event_bits & CHARGING)
		{
			LCD_String("Card is topped  ", 16, "up with 3 moneyz", 16);
		}
		else if (event_bits & TOKEN_RELEASE)
		{
			if(xQueueReceive(lcd_queue_handle, &temp_struct, 1000))
				{
					uint8_t card_message[16] = "You have 0 left!";
					card_message[9] = temp_struct.money + '0';
					LCD_String("There you go..  ", 16, card_message, 16);
				}
				else
				{
					LCD_String("There you go!  ", 16, "Coffemaniac!    ", 16);
				}
		}
		else
		{
			LCD_String("Error! You      ", 16, "bastardo!       ", 16);
		}

		xEventGroupClearBits(card_event_group, ILLEGAL_CARD | OUT_OF_MONEY | CHARGING | TOKEN_RELEASE);
		xTimerStart( display_timer, 10);
	}
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
